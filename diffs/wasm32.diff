diff --git a/Framework/Kernel/src/ArrayProperty.cpp b/Framework/Kernel/src/ArrayProperty.cpp
index 3d77b6929ad..640f6b98493 100644
--- a/Framework/Kernel/src/ArrayProperty.cpp
+++ b/Framework/Kernel/src/ArrayProperty.cpp
@@ -114,7 +114,7 @@ template class DLLExport ArrayProperty<std::vector<float>>;
 template class DLLExport ArrayProperty<std::vector<double>>;
 template class DLLExport ArrayProperty<std::vector<std::string>>;
 
-#if defined(_WIN32) || defined(__clang__) && defined(__APPLE__)
+#if defined(_WIN32) || (defined(__clang__) && defined(__APPLE__)) || defined EMSCRIPTEN
 template class DLLExport ArrayProperty<long>;
 template class DLLExport ArrayProperty<unsigned long>;
 template class DLLExport ArrayProperty<std::vector<long>>;
diff --git a/Framework/Kernel/inc/MantidKernel/IPropertyManager.h b/Framework/Kernel/inc/MantidKernel/IPropertyManager.h
index fb5129d18df..d149f1c3999 100644
--- a/Framework/Kernel/inc/MantidKernel/IPropertyManager.h
+++ b/Framework/Kernel/inc/MantidKernel/IPropertyManager.h
@@ -390,7 +390,7 @@ protected:
     operator uint64_t();
     operator OptionalBool();
 
-#ifdef __APPLE__
+#if defined __APPLE__ || defined EMSCRIPTEN
     operator unsigned long();
 #endif
     /// explicit specialization for bool()
diff --git a/Framework/Kernel/src/IPropertyManager.cpp b/Framework/Kernel/src/IPropertyManager.cpp
index a13b8b6096b..9b9d787a624 100644
--- a/Framework/Kernel/src/IPropertyManager.cpp
+++ b/Framework/Kernel/src/IPropertyManager.cpp
@@ -113,7 +113,7 @@ IPropertyManager::TypedValue::operator std::string() { return pm.getPropertyValu
 IPropertyManager::TypedValue::operator OptionalBool() { return pm.getValue<OptionalBool>(prop); }
 IPropertyManager::TypedValue::operator Property *() { return pm.getPointerToProperty(prop); }
 
-#ifdef __APPLE__
+#if defined __APPLE__ || defined EMSCRIPTEN
 // These must precede the operator() declaration, temporarily switch batch to global namespace
 }
 DEFINE_IPROPERTYMANAGER_GETVALUE(unsigned long);
diff --git a/Framework/Kernel/src/PropertyWithValue.cpp b/Framework/Kernel/src/PropertyWithValue.cpp
index 5f18e4c4b4c..b83d0f09868 100644
--- a/Framework/Kernel/src/PropertyWithValue.cpp
+++ b/Framework/Kernel/src/PropertyWithValue.cpp
@@ -62,6 +62,8 @@ template <> void PropertyWithValue<long>::saveProperty(::NeXus::File *file) {
   file->closeData();
   file->closeGroup();
 }
+#endif
+#if defined(_WIN32) || defined(__clang__)
 template class MANTID_KERNEL_DLL PropertyWithValue<long>;
 template class MANTID_KERNEL_DLL PropertyWithValue<unsigned long>;
 template class MANTID_KERNEL_DLL PropertyWithValue<std::vector<long>>;
diff --git a/Framework/Kernel/src/Memory.cpp b/Framework/Kernel/src/Memory.cpp
index f545d13116f..e6ed9df1dd8 100644
--- a/Framework/Kernel/src/Memory.cpp
+++ b/Framework/Kernel/src/Memory.cpp
@@ -10,7 +10,7 @@
 #include <cstdio>
 #include <sstream>
 
-#ifdef __linux__
+#if defined __linux__ || __EMSCRIPTEN__
 #include <fstream>
 #include <malloc.h>
 #include <sys/resource.h>
@@ -27,6 +27,9 @@
 #include <Psapi.h>
 #include <windows.h>
 #endif
+#ifdef __EMSCRIPTEN__
+#include <emscripten/emscripten.h>
+#endif
 
 using std::size_t;
 using std::string;
@@ -117,6 +120,9 @@ void process_mem_usage(size_t &vm_usage, size_t &resident_set) {
     resident_set = pmc.WorkingSetSize / 1024;
   }
   CloseHandle(hProcess);
+#elif __EMSCRIPTEN__
+  vm_usage = EM_ASM_INT(return HEAP8.length);
+  resident_set = mallinfo().uordblks / 1024;
 #endif
 }
 
@@ -265,6 +271,9 @@ void MemoryStats::process_mem_system(size_t &sys_avail, size_t &sys_total) {
     sys_avail = static_cast<size_t>(memStatus.ullAvailVirtual / 1024);
     sys_total = static_cast<size_t>(memStatus.ullTotalVirtual / 1024);
   }
+#elif __EMSCRIPTEN__
+  sys_total = 2097152;  // Hardcoded to 2GiB
+  sys_avail = mallinfo().fordblks / 1024;
 #endif
 
   g_log.debug() << "Memory: " << sys_avail << " (free), " << sys_total << " (total).\n";
