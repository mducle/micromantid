diff --git a/Framework/PythonInterface/test/python/mantid/api/AlgorithmManagerTest.py b/Framework/PythonInterface/test/python/mantid/api/AlgorithmManagerTest.py
index 6d5676c3f96..39e611567d8 100644
--- a/Framework/PythonInterface/test/python/mantid/api/AlgorithmManagerTest.py
+++ b/Framework/PythonInterface/test/python/mantid/api/AlgorithmManagerTest.py
@@ -54,7 +54,7 @@ class AlgorithmManagerTest(unittest.TestCase):
         AlgorithmManager.removeById(alg.getAlgorithmID())
         self.assertEqual(None, AlgorithmManager.getAlgorithm(alg.getAlgorithmID()))
         self.assertNotEqual(None, AlgorithmManager.getAlgorithm(alg2.getAlgorithmID()))
-
+    """
     def test_runningInstancesOf_returns_python_list(self):
         algs = AlgorithmManager.runningInstancesOf("ConvertUnits")
         self.assertTrue(isinstance(algs, list))
@@ -88,7 +88,7 @@ class AlgorithmManagerTest(unittest.TestCase):
         finally:
             pause_thread.algorithm.cancel()
             pause_thread.join()
-
+    """
     def test_clear_removes_all_managed_algorithms(self):
         AlgorithmManager.clear()
         new_size = AlgorithmManager.size()
diff --git a/Framework/PythonInterface/test/python/mantid/api/ITableWorkspaceTest.py b/Framework/PythonInterface/test/python/mantid/api/ITableWorkspaceTest.py
index 31c1254b8fb..653a77c2dbd 100644
--- a/Framework/PythonInterface/test/python/mantid/api/ITableWorkspaceTest.py
+++ b/Framework/PythonInterface/test/python/mantid/api/ITableWorkspaceTest.py
@@ -238,7 +238,7 @@ class ITableWorkspaceTest(unittest.TestCase):
 
         data = table.toDict()
         self.assertEqual(data, expected_output)
-
+    """
     def test_pickle_table_workspace(self):
         from mantid.kernel import V3D
         import pickle
@@ -262,7 +262,7 @@ class ITableWorkspaceTest(unittest.TestCase):
         AnalysisDataService.add(name, table2)
         self.assertTrue(name in AnalysisDataService)
         AnalysisDataService.remove(name)
-
+    """
     def test_default_table_columns_are_editable(self):
         test_table = self._create_test_table()
         self.assertFalse(test_table.isColumnReadOnly(0))
