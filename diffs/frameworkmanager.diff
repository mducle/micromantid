diff --git a/Framework/API/inc/MantidAPI/FrameworkManager.h b/Framework/API/inc/MantidAPI/FrameworkManager.h
index 5e2db1b8439..19f5d6d0031 100644
--- a/Framework/API/inc/MantidAPI/FrameworkManager.h
+++ b/Framework/API/inc/MantidAPI/FrameworkManager.h
@@ -13,6 +13,10 @@
 #include "MantidKernel/SingletonHolder.h"
 #include <memory>

+#ifndef PROJECT_NAME
+#define PROJECT_NAME mantid
+#endif
+
 namespace Mantid {

 namespace API {
diff --git a/Framework/API/src/FrameworkManager.cpp b/Framework/API/src/FrameworkManager.cpp
index 7c08dbb6c58..eb925c79e3e 100644
--- a/Framework/API/src/FrameworkManager.cpp
+++ b/Framework/API/src/FrameworkManager.cpp
@@ -15,7 +15,7 @@
 #include "MantidKernel/Memory.h"
 #include "MantidKernel/MultiThreaded.h"
 #include "MantidKernel/PropertyManagerDataService.h"
-#include "MantidKernel/UsageService.h"
+//#include "MantidKernel/UsageService.h"
 
 #include <boost/algorithm/string/classification.hpp>
 #include <boost/algorithm/string/split.hpp>
@@ -26,7 +26,7 @@
 #include <cstdarg>
 #include <memory>
 
-#include "tbb/global_control.h"
+//#include "tbb/global_control.h"
 
 #ifdef _WIN32
 #include <winsock2.h>
@@ -45,14 +45,14 @@ namespace {
 // We have technically introduced a leak by not deleting this object in the situation where
 // `FrameworkManager::shutdown` is not called but the memory cannot be used again by the program since
 // it survives for the duration of the program. It will ultimately be reclaimed by the OS.
-tbb::global_control *GLOBAL_TBB_CONTROL = nullptr;
+//tbb::global_control *GLOBAL_TBB_CONTROL = nullptr;
 } // namespace
 
 namespace Mantid {
 using Kernel::ConfigService;
 using Kernel::LibraryManager;
 using Kernel::LibraryManagerImpl;
-using Kernel::UsageService;
+//using Kernel::UsageService;
 namespace API {
 namespace {
 /// static logger
@@ -151,6 +151,7 @@ void FrameworkManagerImpl::setNumOMPThreadsToConfigValue() {
  * @param nthreads :: The maximum number of threads to use
  */
 void FrameworkManagerImpl::setNumOMPThreads(const int nthreads) {
+/*
   g_log.debug() << "Setting maximum number of threads to " << nthreads << "\n";
   PARALLEL_SET_NUM_THREADS(nthreads);
   if (GLOBAL_TBB_CONTROL) {
@@ -158,6 +159,7 @@ void FrameworkManagerImpl::setNumOMPThreads(const int nthreads) {
   }
 
   GLOBAL_TBB_CONTROL = new tbb::global_control(tbb::global_control::max_allowed_parallelism, nthreads);
+*/
 }
 
 /**
@@ -179,9 +181,9 @@ void FrameworkManagerImpl::clear() {
 }
 
 void FrameworkManagerImpl::shutdown() {
-  Kernel::UsageService::Instance().shutdown();
+//Kernel::UsageService::Instance().shutdown();
   // Ensure we don't run into static init ordering issues with TBB
-  delete GLOBAL_TBB_CONTROL;
+//delete GLOBAL_TBB_CONTROL;
   clear();
 }
 
@@ -346,9 +348,9 @@ void FrameworkManagerImpl::asynchronousStartupTasks() {
     g_log.information() << "Version check disabled.\n";
   }
 
-  setupUsageReporting();
+//setupUsageReporting();
 }
-
+/*
 void FrameworkManagerImpl::setupUsageReporting() {
   auto &configSvc = ConfigService::Instance();
   auto interval = configSvc.getValue<int>("Usage.BufferCheckInterval");
@@ -360,9 +362,10 @@ void FrameworkManagerImpl::setupUsageReporting() {
   usageSvc.setEnabled(enabled.value_or(false));
   usageSvc.registerStartup();
 }
-
+*/
 /// Update instrument definitions from github
 void FrameworkManagerImpl::updateInstrumentDefinitions() {
+/*
   try {
     auto algDownloadInstrument = Mantid::API::AlgorithmManager::Instance().create("DownloadInstrument");
     algDownloadInstrument->setAlgStartupLogging(false);
@@ -371,10 +374,12 @@ void FrameworkManagerImpl::updateInstrumentDefinitions() {
     g_log.debug() << "DowndloadInstrument algorithm is not available - cannot "
                      "update instrument definitions.\n";
   }
+*/
 }
 
 /// Check if a newer release of Mantid is available
 void FrameworkManagerImpl::checkIfNewerVersionIsAvailable() {
+/*
   try {
     auto algCheckVersion = Mantid::API::AlgorithmManager::Instance().create("CheckMantidVersion");
     algCheckVersion->setAlgStartupLogging(false);
@@ -383,6 +388,7 @@ void FrameworkManagerImpl::checkIfNewerVersionIsAvailable() {
     g_log.debug() << "CheckMantidVersion algorithm is not available - cannot "
                      "check if a newer version is available.\n";
   }
+*/
 }
 
 } // namespace API
diff --git a/Framework/PythonInterface/mantid/api/src/Exports/FrameworkManager.cpp b/Framework/PythonInterface/mantid/api/src/Exports/FrameworkManager.cpp
index c76812513d7..ba3b7b0f268 100644
--- a/Framework/PythonInterface/mantid/api/src/Exports/FrameworkManager.cpp
+++ b/Framework/PythonInterface/mantid/api/src/Exports/FrameworkManager.cpp
@@ -94,14 +94,14 @@ FrameworkManagerImpl &instance() {
     INSTANCE_CALLED = true;
     declareCPPAlgorithms();
     updatePythonPaths();
-    import("mantid.simpleapi");
+    import(BOOST_PP_STRINGIZE(PROJECT_NAME) ".simpleapi");
     // Without a python-based exit handler the singletons are only cleaned
     // up after main() and this is too late to acquire the GIL to be able to
     // delete any python objects still stored in other singletons like the
     // ADS or AlgorithmManager.
     PyRun_SimpleString("import atexit\n"
                        "def cleanupFrameworkManager():\n"
-                       "    from mantid.api import FrameworkManager\n"
+                       "    from " BOOST_PP_STRINGIZE(PROJECT_NAME) ".api import FrameworkManager\n"
                        "    FrameworkManager.shutdown()\n"
                        "atexit.register(cleanupFrameworkManager)");
   });
