#ifndef REGISTRATIONS_HPP
#define REGISTRATIONS_HPP
#ifdef EMSCRIPTEN

namespace Mantid { 

  // Workspaces
  namespace DataObjects {
    void register_ws_Workspace2D();
    void register_ws_MaskWorkspace();
    void register_ws_EventWorkspace();
    void register_ws_PeaksWorkspace();
    void register_ws_RebinnedOutput();
    void register_ws_TableWorkspace();
    void register_ws_GroupingWorkspace();
    void register_ws_SpecialWorkspace2D();
    void register_ws_WorkspaceSingleValue();
    void register_ws_LeanElasticPeaksWorkspace();
    void register_tablecolumn_types();
    void register_vectorcolumn_types();
  } 

  // Algorithms
  namespace Algorithms {
    void register_alg_FFT();
    void register_alg_Max();
    void register_alg_Min();
    void register_alg_Qxy();
    void register_alg_Plus();
    void register_alg_Q1D2();
    void register_alg_GetEi();
    void register_alg_Minus();
    void register_alg_Pause();
    void register_alg_Power();
    void register_alg_Rebin();
    void register_alg_Scale();
    void register_alg_SofQW();
    void register_alg_Divide();
    void register_alg_GetEi2();
    void register_alg_MaxEnt();
    void register_alg_MaxMin();
    void register_alg_ScaleX();
    void register_alg_Stitch();
    void register_alg_AddPeak();
    void register_alg_Comment();
    void register_alg_FindEPP();
    void register_alg_FitPeak();
    void register_alg_RealFFT();
    void register_alg_Rebin2D();
    void register_alg_Rebunch();
    void register_alg_Regroup();
    void register_alg_ChopData();
    void register_alg_CopyLogs();
    void register_alg_FitPeaks();
    void register_alg_GetAllEi();
    void register_alg_MaskBins();
    void register_alg_Multiply();
    void register_alg_Segfault();
    void register_alg_Stitch1D();
    void register_alg_CreateEPP();
    void register_alg_DeleteLog();
    void register_alg_FFTSmooth();
    void register_alg_FindPeaks();
    void register_alg_Logarithm();
    void register_alg_MergeLogs();
    void register_alg_MergeRuns();
    void register_alg_RadiusSum();
    void register_alg_ResampleX();
    void register_alg_SortXAxis();
    void register_alg_Transpose();
    void register_alg_UnwrapSNS();
    void register_alg_CopySample();
    void register_alg_FFTSmooth2();
    void register_alg_InvertMask();
    void register_alg_MaskBinsIf();
    void register_alg_RemoveBins();
    void register_alg_SassenaFFT();
    void register_alg_SmoothData();
    void register_alg_SolidAngle();
    void register_alg_SortEvents();
    void register_alg_StripPeaks();
    void register_alg_SumSpectra();
    void register_alg_CorrectKiKf();
    void register_alg_Exponential();
    void register_alg_ExtractMask();
    void register_alg_Integration();
    void register_alg_IQTransform();
    void register_alg_LineProfile();
    void register_alg_Q1DWeighted();
    void register_alg_RebinRagged();
    void register_alg_RingProfile();
    void register_alg_SofQWCentre();
    void register_alg_AddSampleLog();
    void register_alg_CalculateIqt();
    void register_alg_ConjoinXRuns();
    void register_alg_ConvertUnits();
    void register_alg_FilterByTime();
    void register_alg_FilterEvents();
    void register_alg_GetEiMonDet3();
    void register_alg_IntegrateEPP();
    void register_alg_ShiftLogTime();
    void register_alg_SofQWPolygon();
    void register_alg_Stitch1DMany();
    void register_alg_SumRowColumn();
    void register_alg_WeightedMean();
    void register_alg_WienerSmooth();
    void register_alg_AppendSpectra();
    void register_alg_CalculateDIFC();
    void register_alg_ChangeLogTime();
    void register_alg_ClearMaskFlag();
    void register_alg_CopyDataRange();
    void register_alg_CorrectToFile();
    void register_alg_CropWorkspace();
    void register_alg_ElasticWindow();
    void register_alg_FFTDerivative();
    void register_alg_GeneratePeaks();
    void register_alg_MultiplyRange();
    void register_alg_PDCalibration();
    void register_alg_PoissonErrors();
    void register_alg_RemoveSpectra();
    void register_alg_SumNeighbours();
    void register_alg_UnwrapMonitor();
    void register_alg_AlignDetectors();
    void register_alg_AverageLogData();
    void register_alg_ChangeTimeZero();
    void register_alg_CloneWorkspace();
    void register_alg_CombineDiffCal();
    void register_alg_ConvertDiffCal();
    void register_alg_CorrectTOFAxis();
    void register_alg_CrossCorrelate();
    void register_alg_ExtractSpectra();
    void register_alg_FilterByXValue();
    void register_alg_MaskInstrument();
    void register_alg_ModeratorTzero();
    void register_alg_MostLikelyMean();
    void register_alg_ResetNegatives();
    void register_alg_CalculateZscore();
    void register_alg_ChangeBinOffset();
    void register_alg_ChangePulsetime();
    void register_alg_CreateWorkspace();
    void register_alg_CropToComponent();
    void register_alg_DeleteWorkspace();
    void register_alg_FilterBadPulses();
    void register_alg_GetQsInQENSData();
    void register_alg_GroupWorkspaces();
    void register_alg_MaskDetectorsIf();
    void register_alg_RayTracerTester();
    void register_alg_RemoveLowResTOF();
    void register_alg_RenameWorkspace();
    void register_alg_SignalOverError();
    void register_alg_SpatialGrouping();
    void register_alg_AddLogDerivative();
    void register_alg_AddTimeSeriesLog();
    void register_alg_ApplyCalibration();
    void register_alg_CalculatePlaczek();
    void register_alg_DeleteWorkspaces();
    void register_alg_EQSANSResolution();
    void register_alg_FilterByLogValue();
    void register_alg_NormaliseToUnity();
    void register_alg_RebinToWorkspace();
    void register_alg_RemoveBackground();
    void register_alg_RenameWorkspaces();
    void register_alg_SetUncertainties();
    void register_alg_SmoothNeighbours();
    void register_alg_UnGroupWorkspace();
    void register_alg_CompareWorkspaces();
    void register_alg_ConjoinWorkspaces();
    void register_alg_FindDeadDetectors();
    void register_alg_FindPeaksConvolve();
    void register_alg_FlipperEfficiency();
    void register_alg_He3TubeEfficiency();
    void register_alg_LorentzCorrection();
    void register_alg_MaskBinsFromTable();
    void register_alg_RebinByPulseTimes();
    void register_alg_RemovePromptPulse();
    void register_alg_TOFSANSResolution();
    void register_alg_AnyShapeAbsorption();
    void register_alg_BinaryOperateMasks();
    void register_alg_CalculateCountRate();
    void register_alg_ConvertToHistogram();
    void register_alg_ConvertToPointData();
    void register_alg_CreateDummyCalFile();
    void register_alg_CreatePSDBleedMask();
    void register_alg_CylinderAbsorption();
    void register_alg_DeadTimeCorrection();
    void register_alg_DetectorDiagnostic();
    void register_alg_EQSANSCorrectFrame();
    void register_alg_EQSANSTofStructure();
    void register_alg_EstimateDivergence();
    void register_alg_ExtractFFTSpectrum();
    void register_alg_ExtractMaskToTable();
    void register_alg_FindPeakBackground();
    void register_alg_GetDetectorOffsets();
    void register_alg_GroupToXResolution();
    void register_alg_InterpolatingRebin();
    void register_alg_MedianDetectorTest();
    void register_alg_NormaliseByCurrent();
    void register_alg_NormaliseToMonitor();
    void register_alg_ParallaxCorrection();
    void register_alg_PowerLawCorrection();
    void register_alg_ReadGroupsFromFile();
    void register_alg_StripVanadiumPeaks();
    void register_alg_ApplyFloodWorkspace();
    void register_alg_CalculateEfficiency();
    void register_alg_ConvertSpectrumAxis();
    void register_alg_ConvertToConstantL2();
    void register_alg_CopyDetectorMapping();
    void register_alg_CreateDetectorTable();
    void register_alg_CropWorkspaceRagged();
    void register_alg_ExportTimeSeriesLog();
    void register_alg_FlatPlateAbsorption();
    void register_alg_NormaliseByDetector();
    void register_alg_PDFFourierTransform();
    void register_alg_PolarizerEfficiency();
    void register_alg_RebinByTimeAtSample();
    void register_alg_RemoveMaskedSpectra();
    void register_alg_SphericalAbsorption();
    void register_alg_StripVanadiumPeaks2();
    void register_alg_SumEventsByLogValue();
    void register_alg_SumOverlappingTubes();
    void register_alg_UnwrapMonitorsInTOF();
    void register_alg_ApplyDetailedBalance();
    void register_alg_CalculateEfficiency2();
    void register_alg_ConvertAxisByFormula();
    void register_alg_ConvertSpectrumAxis2();
    void register_alg_CreateCalFileByNames();
    void register_alg_CreateFloodWorkspace();
    void register_alg_CreatePeaksWorkspace();
    void register_alg_DiffractionFocussing();
    void register_alg_GenerateEventsFilter();
    void register_alg_GeneratePythonScript();
    void register_alg_IntegrateByComponent();
    void register_alg_ModeratorTzeroLinear();
    void register_alg_MonteCarloAbsorption();
    void register_alg_PDFFourierTransform2();
    void register_alg_PolynomialCorrection();
    void register_alg_ReplaceSpecialValues();
    void register_alg_AnnularRingAbsorption();
    void register_alg_CalculateDynamicRange();
    void register_alg_CalculateTransmission();
    void register_alg_ConvertToDistribution();
    void register_alg_CorelliCrossCorrelate();
    void register_alg_CreateSampleWorkspace();
    void register_alg_DetectorEfficiencyCor();
    void register_alg_DiffractionFocussing2();
    void register_alg_ExponentialCorrection();
    void register_alg_ExtractSingleSpectrum();
    void register_alg_FixGSASInstrumentFile();
    void register_alg_HRPDSlabCanAbsorption();
    void register_alg_MaskBinsFromWorkspace();
    void register_alg_PaddingAndApodization();
    void register_alg_ApplyInstrumentToPeaks();
    void register_alg_Bin2DPowderDiffraction();
    void register_alg_ConvertAxesToRealSpace();
    void register_alg_CreateLogPropertyTable();
    void register_alg_EditInstrumentGeometry();
    void register_alg_ExtractUnmaskedSpectra();
    void register_alg_IdentifyNoisyDetectors();
    void register_alg_MaskNonOverlappingBins();
    void register_alg_MayersSampleCorrection();
    void register_alg_OneMinusExponentialCor();
    void register_alg_PerformIndexOperations();
    void register_alg_RemoveWorkspaceHistory();
    void register_alg_SetInstrumentParameter();
    void register_alg_SofQWNormalisedPolygon();
    void register_alg_CalculateFlatBackground();
    void register_alg_ConvertFromDistribution();
    void register_alg_ConvertToEventWorkspace();
    void register_alg_CorelliCalibrationApply();
    void register_alg_CreateGroupingWorkspace();
    void register_alg_CreateLogTimeCorrection();
    void register_alg_DirectILLTubeBackground();
    void register_alg_GenerateIPythonNotebook();
    void register_alg_GeneratePythonFitScript();
    void register_alg_HyspecScharpfCorrection();
    void register_alg_MagFormFactorCorrection();
    void register_alg_PointByPointVCorrection();
    void register_alg_WeightedMeanOfWorkspace();
    void register_alg_WorkflowAlgorithmRunner();
    void register_alg_ConvertToMatrixWorkspace();
    void register_alg_CopyInstrumentParameters();
    void register_alg_CreateFlatEventWorkspace();
    void register_alg_FindCenterOfMassPosition();
    void register_alg_HeliumAnalyserEfficiency();
    void register_alg_MonitorEfficiencyCorUser();
    void register_alg_RemoveInstrumentGeometry();
    void register_alg_TOFSANSResolutionByPixel();
    void register_alg_VesuvioL1ThetaResolution();
    void register_alg_XrayAbsorptionCorrection();
    void register_alg_CarpenterSampleCorrection();
    void register_alg_ClearInstrumentParameters();
    void register_alg_CreateMonteCarloWorkspace();
    void register_alg_DetectorEfficiencyCorUser();
    void register_alg_FindCenterOfMassPosition2();
    void register_alg_PolarizationEfficiencyCor();
    void register_alg_ResizeRectangularDetector();
    void register_alg_CorelliCalibrationDatabase();
    void register_alg_FindDetectorsOutsideLimits();
    void register_alg_ApplyTransmissionCorrection();
    void register_alg_CreateSingleValuedWorkspace();
    void register_alg_CreateUserDefinedBackground();
    void register_alg_CuboidGaugeVolumeAbsorption();
    void register_alg_DetectorEfficiencyVariation();
    void register_alg_GeneralisedSecondDifference();
    void register_alg_GetTimeSeriesLogInformation();
    void register_alg_MultipleScatteringCorrection();
    void register_alg_PDDetermineCharacterizations();
    void register_alg_PolarizationCorrectionWildes();
    void register_alg_CalculatePolynomialBackground();
    void register_alg_ConvertTableToMatrixWorkspace();
    void register_alg_EstimateResolutionDiffraction();
    void register_alg_CalculatePlaczekSelfScattering();
    void register_alg_ConvertUnitsUsingDetectorTable();
    void register_alg_PolarizationEfficienciesWildes();
    void register_alg_CalculatePlaczekSelfScattering2();
    void register_alg_DepolarizedAnalyserTransmission();
    void register_alg_PolarizationCorrectionFredrikze();
    void register_alg_AddAbsorptionWeightedPathLengths();
    void register_alg_PaalmanPingsAbsorptionCorrection();
    void register_alg_CalculateTransmissionBeamSpreader();
    void register_alg_CalculateCarpenterSampleCorrection();
    void register_alg_DiffractionEventCalibrateDetectors();
    void register_alg_DiscusMultipleScatteringCorrection();
    void register_alg_GenerateGoniometerIndependentBackground();
  }

  // CurveFitting
  namespace CurveFitting {
    namespace Algorithms {
      void register_alg_Fit();
      void register_alg_PawleyFit();
      void register_alg_DoublePulseFit();
      void register_alg_ConvertToYSpace();
      void register_alg_SplineSmoothing();
      void register_alg_EvaluateFunction();
      void register_alg_SplineBackground();
      void register_alg_EstimatePeakErrors();
      void register_alg_CalculateChiSquared();
      void register_alg_NormaliseByPeakArea();
      void register_alg_SplineInterpolation();
      void register_alg_CalculateCostFunction();
      void register_alg_EstimateFitParameters();
    }
    namespace Functions {
      void register_alg_UserFunction1D();
    }
  }

  namespace Crystal {
    void register_alg_SetUB();
  }

  // DataHandling
  namespace DataHandling {
    void register_alg_Load();
    void register_alg_LoadLog();
    void register_alg_SaveCSV();
    void register_alg_SavePAR();
    void register_alg_SavePHX();
    void register_alg_SaveSPE();
    void register_alg_SetBeam();
    void register_alg_LoadMask();
    void register_alg_LoadSpec();
    void register_alg_SaveMask();
    void register_alg_LoadNexus();
    void register_alg_RenameLog();
    void register_alg_SaveAscii();
    void register_alg_SaveNexus();
    void register_alg_SaveNXSPE();
    void register_alg_RemoveLogs();
    void register_alg_SaveAscii2();
    void register_alg_LoadCalFile();
    void register_alg_LoadRawBin0();
    void register_alg_MaskSpectra();
    void register_alg_NexusTester();
    void register_alg_RawFileInfo();
    void register_alg_SaveCalFile();
    void register_alg_ApplyDiffCal();
    void register_alg_RotateSource();
    void register_alg_LoadNexusLogs();
    void register_alg_MaskDetectors();
    void register_alg_SaveISISNexus();
    void register_alg_CompressEvents();
    void register_alg_GroupDetectors();
    void register_alg_LoadInstrument();
    void register_alg_DeleteTableRows();
    void register_alg_GroupDetectors2();
    void register_alg_FindDetectorsPar();
    void register_alg_LoadDetectorInfo();
    void register_alg_LoadIDFFromNexus();
    void register_alg_LoadMappingTable();
    void register_alg_LoadRawSpectrum0();
    void register_alg_CreateSampleShape();
    void register_alg_DefineGaugeVolume();
    void register_alg_DetermineChunking();
    void register_alg_LoadNexusMonitors();
    void register_alg_LoadParameterFile();
    void register_alg_RotateSampleShape();
    void register_alg_SaveParameterFile();
    void register_alg_SetSampleMaterial();
    void register_alg_CheckMantidVersion();
    void register_alg_LoadNexusMonitors2();
    void register_alg_SaveNexusProcessed();
    void register_alg_SortTableWorkspace();
    void register_alg_FindDetectorsInShape();
    void register_alg_LoadErrorEventsNexus();
    void register_alg_LoadPreNexusMonitors();
    void register_alg_MaskDetectorsInShape();
    void register_alg_LoadInstrumentFromRaw();
    void register_alg_SaveDetectorsGrouping();
    void register_alg_GenerateGroupingPowder();
    void register_alg_LoadEventAsWorkspace2D();
    void register_alg_ExtractMonitorWorkspace();
    void register_alg_GenerateGroupingPowder2();
    void register_alg_LoadInstrumentFromNexus();
    void register_alg_MoveInstrumentComponent();
    void register_alg_LoadSampleDetailsFromRaw();
    void register_alg_ModifyDetectorDotDatFile();
    void register_alg_ScaleInstrumentComponent();
    void register_alg_UpdateInstrumentFromFile();
    void register_alg_CreateSimulationWorkspace();
    void register_alg_LoadDetectorsGroupingFile();
    void register_alg_RotateInstrumentComponent();
    void register_alg_CreateChunkingFromInstrument();
    void register_alg_CreatePolarizationEfficiencies();
    void register_alg_ExtractPolarizationEfficiencies();
    void register_alg_JoinISISPolarizationEfficiencies();
    void register_alg_LoadISISPolarizationEfficiencies();
  }

  // MD
  namespace MDAlgorithms {
    void register_alg_OrMD();
    void register_alg_AndMD();
    void register_alg_BinMD();
    void register_alg_CutMD();
    void register_alg_NotMD();
    void register_alg_XorMD();
    void register_alg_MaskMD();
    void register_alg_MDNorm();
    void register_alg_PlusMD();
    void register_alg_SaveMD();
    void register_alg_MergeMD();
    void register_alg_MinusMD();
    void register_alg_PowerMD();
    void register_alg_SaveMD2();
    void register_alg_SliceMD();
    void register_alg_CreateMD();
    void register_alg_DivideMD();
    void register_alg_SmoothMD();
    void register_alg_CompactMD();
    void register_alg_EqualToMD();
    void register_alg_MDNormSCD();
    void register_alg_LessThanMD();
    void register_alg_MultiplyMD();
    void register_alg_SetMDFrame();
    void register_alg_ConvertToMD();
    void register_alg_FindPeaksMD();
    void register_alg_LogarithmMD();
    void register_alg_ReplicateMD();
    void register_alg_TransformMD();
    void register_alg_TransposeMD();
    void register_alg_AccumulateMD();
    void register_alg_MergeMDFiles();
    void register_alg_ExponentialMD();
    void register_alg_GreaterThanMD();
    void register_alg_MDNormDirectSC();
    void register_alg_SetMDUsingMask();
    void register_alg_WeightedMeanMD();
    void register_alg_FakeMDEventData();
    void register_alg_CloneMDWorkspace();
    void register_alg_QueryMDWorkspace();
    void register_alg_ChangeQConvention();
    void register_alg_CreateMDWorkspace();
    void register_alg_EvaluateMDFunction();
    void register_alg_CompareMDWorkspaces();
    void register_alg_CalculateCoverageDGS();
    void register_alg_ApplyDetailedBalanceMD();
    void register_alg_ConvertToMDMinMaxLocal();
    void register_alg_CreateMDHistoWorkspace();
    void register_alg_ImportMDEventWorkspace();
    void register_alg_ImportMDHistoWorkspace();
    void register_alg_ConvertToMDMinMaxGlobal();
    void register_alg_PreprocessDetectorsToMD();
    void register_alg_IntegrateMDHistoWorkspace();
    void register_alg_MagneticFormFactorCorrectionMD();
    void register_alg_RecalculateTrajectoriesExtents();
    void register_alg_ConvertMDHistoToMatrixWorkspace();
    void register_alg_DgsScatteredTransmissionCorrectionMD();
  }
}
void register_alg_SaveFocusedXYE(); // Should be in Mantid::DataHandling but is not for some reason!

#endif // EMSCRIPTEN
#endif // REGISTRATIONS_HPP
